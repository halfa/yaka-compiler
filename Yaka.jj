/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.7";
	OUTPUT_DIRECTORY="src";
}

PARSER_BEGIN(Yaka)

public class Yaka {
  	static YVM yvm;
    static TabIdent tabIdent;
    static Expression expression;
    static Declaration declaration;
  
  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;
    
    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Yaka [fichier]");
      return;
    }
    try {
   	  /* Build objet */
      yvm = new YVM();
      tabIdent = new TabIdent();
      expression = new Expression(yvm);
      declaration = new Declaration();
      
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)

/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu ,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ YakaTokenManager.entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{YakaTokenManager.identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/******** début de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME><ident> {yvm = new YVM(YakaTokenManager.identLu); yvm.entete();}	
   bloc()
   <FPROGRAMME> { yvm.queue(); }
}


void bloc() : {}{
 (declConst())*
 (declVar())*	{ yvm.ouvrePrinc(declaration.getNbVariables());}	
   suiteInstr()  // modifié
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident>  { declaration.setCurrentIdent(YakaTokenManager.identLu); }
   "=" valConst() 
}

void valConst() : {}{
  <entier> 	{ declaration.createConst(YakaTokenManager.entierLu, Type.INTEGER); }	
 | <ident>	{ declaration.createConst(YakaTokenManager.identLu); }	
 | <VRAI> 	{ declaration.createConst(-1, Type.BOOLEAN); }
 | <FAUX>   { declaration.createConst(0, Type.BOOLEAN); }
}


void declVar() : {}
{
  <VAR> type()	
  <ident> { declaration.createVar(YakaTokenManager.identLu);}
  (","
      <ident> { declaration.createVar(YakaTokenManager.identLu); }
  )* ";"
}

void type() :{}
{
   <ENTIER> { declaration.setCurrentType(Type.INTEGER); }
 | <BOOLEEN> { declaration.setCurrentType(Type.BOOLEAN); }
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{ (expression() (";" (expression())? )*)? }

// FIXME ajout >>>>>>

void suiteInstr() : {}
{ (instruction() (";" (instruction())? )*)? }

void instruction() : {}
{ affectation() | lecture() | ecriture() }

void affectation() : {}
{ <ident> "=" expression() }

void lecture() : {}
{ <LIRE> "(" <ident> ")" }

void ecriture() :{}
{ <ECRIRE>("(" expression() /*| chaine() */")") | <ALALIGNE> {yvm.aLaLigne();} }

//<<<<<< fin ajout */


/*
 * Expression
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {expression.whatRel();}
  )?
}

void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme() {expression.whatAdd();}
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	{expression.whatMul();}
  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {expression.whatNeg();}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 	{yvm.iconst(YakaTokenManager.entierLu);}
 | <ident> 	{
 Ident id = TabIdent.getIdent(YakaTokenManager.identLu);
 if (id instanceof IdVar){
 	yvm.iload((IdVar)TabIdent.getIdent(YakaTokenManager.identLu)).getOffset());
 	}else{
 	yvm.iconst(((IdConst)TabIdent.getIdent(YakaTokenManager.identLu)).getVal());}}
 | <VRAI> 	{yvm.iconst(-1);}
 | <FAUX> 	{yvm.iconst(0);}
}


void opRel() : {}
{
   "=" 		{expression.pushOp(Operator.EGAL);}
 | "<>" 	{expression.pushOp(Operator.DIFF);}
 | "<" 		{expression.pushOp(Operator.LOW_STRICT);}
 | "<=" 	{expression.pushOp(Operator.LOW_EGAL);}
 | ">" 		{expression.pushOp(Operator.UP_STRICT);}
 | ">=" 	{expression.pushOp(Operator.LOW_EGAL);}
} 

void opAdd() : {}
{
    "+"		{expression.pushOp(Operator.PLUS);}
  |  "-"  	{expression.pushOp(Operator.MINUS);}
  | <OU> 	{expression.pushOp(Operator.OR);}
}

void opMul() : {}
{
  "*"		{expression.pushOp(Operator.MULT);}
  | "/"		{expression.pushOp(Operator.DIV);}
  | <ET>	{expression.pushOp(Operator.AND);}
} 

void opNeg() : {}
{ "-" 		{expression.pushOp(Operator.OPP);}
 | <NON>	{expression.pushOp(Operator.NOT);}
}
